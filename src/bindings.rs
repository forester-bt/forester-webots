/* automatically generated by rust-bindgen 0.69.4 */

pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140400;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_FAST_FMA: u32 = 1;
pub const FP_FAST_FMAF: u32 = 1;
pub const FP_FAST_FMAL: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const WB_ANGULAR: u32 = 0;
pub const WB_STDOUT: u32 = 1;
pub const WB_STDERR: u32 = 2;
pub const WB_IMAGE_RGB: u32 = 3;
pub const WB_IMAGE_RGBA: u32 = 4;
pub const WB_IMAGE_ARGB: u32 = 5;
pub const WB_IMAGE_BGRA: u32 = 6;
pub const WB_IMAGE_ABGR: u32 = 7;
pub const WB_CHANNEL_BROADCAST: i32 = -1;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const WB_SUPERVISOR_MOVIE_READY: u32 = 0;
pub const WB_SUPERVISOR_MOVIE_RECORDING: u32 = 1;
pub const WB_SUPERVISOR_MOVIE_SAVING: u32 = 2;
pub const WB_SUPERVISOR_MOVIE_WRITE_ERROR: u32 = 3;
pub const WB_SUPERVISOR_MOVIE_ENCODING_ERROR: u32 = 4;
pub const WB_SUPERVISOR_MOVIE_SIMULATION_ERROR: u32 = 5;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const ANSI_RESET: &[u8; 5] = b"\x1B[0m\0";
pub const ANSI_BOLD: &[u8; 5] = b"\x1B[1m\0";
pub const ANSI_UNDERLINE: &[u8; 5] = b"\x1B[4m\0";
pub const ANSI_BLACK_BACKGROUND: &[u8; 6] = b"\x1B[40m\0";
pub const ANSI_RED_BACKGROUND: &[u8; 6] = b"\x1B[41m\0";
pub const ANSI_GREEN_BACKGROUND: &[u8; 6] = b"\x1B[42m\0";
pub const ANSI_YELLOW_BACKGROUND: &[u8; 6] = b"\x1B[43m\0";
pub const ANSI_BLUE_BACKGROUND: &[u8; 6] = b"\x1B[44m\0";
pub const ANSI_MAGENTA_BACKGROUND: &[u8; 6] = b"\x1B[45m\0";
pub const ANSI_CYAN_BACKGROUND: &[u8; 6] = b"\x1B[46m\0";
pub const ANSI_WHITE_BACKGROUND: &[u8; 6] = b"\x1B[47m\0";
pub const ANSI_BLACK_FOREGROUND: &[u8; 6] = b"\x1B[30m\0";
pub const ANSI_RED_FOREGROUND: &[u8; 6] = b"\x1B[31m\0";
pub const ANSI_GREEN_FOREGROUND: &[u8; 6] = b"\x1B[32m\0";
pub const ANSI_YELLOW_FOREGROUND: &[u8; 6] = b"\x1B[33m\0";
pub const ANSI_BLUE_FOREGROUND: &[u8; 6] = b"\x1B[34m\0";
pub const ANSI_MAGENTA_FOREGROUND: &[u8; 6] = b"\x1B[35m\0";
pub const ANSI_CYAN_FOREGROUND: &[u8; 6] = b"\x1B[36m\0";
pub const ANSI_WHITE_FOREGROUND: &[u8; 6] = b"\x1B[37m\0";
pub const ANSI_CLEAR_SCREEN: &[u8; 5] = b"\x1B[2J\0";
pub type WbDeviceTag = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbImageStructPrivate {
    _unused: [u8; 0],
}
pub type WbImageRef = *mut WbImageStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbMotionStructPrivate {
    _unused: [u8; 0],
}
pub type WbMotionRef = *mut WbMotionStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbNodeStructPrivate {
    _unused: [u8; 0],
}
pub type WbNodeRef = *mut WbNodeStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbFieldStructPrivate {
    _unused: [u8; 0],
}
pub type WbFieldRef = *mut WbFieldStructPrivate;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
#[test]
fn bindgen_test_layout___float2() {
    const UNINIT: ::std::mem::MaybeUninit<__float2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__float2>(),
        8usize,
        concat!("Size of: ", stringify!(__float2))
    );
    assert_eq!(
        ::std::mem::align_of::<__float2>(),
        4usize,
        concat!("Alignment of ", stringify!(__float2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__float2),
            "::",
            stringify!(__cosval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
#[test]
fn bindgen_test_layout___double2() {
    const UNINIT: ::std::mem::MaybeUninit<__double2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__double2>(),
        16usize,
        concat!("Size of: ", stringify!(__double2))
    );
    assert_eq!(
        ::std::mem::align_of::<__double2>(),
        8usize,
        concat!("Alignment of ", stringify!(__double2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sinval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__sinval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cosval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__double2),
            "::",
            stringify!(__cosval)
        )
    );
}
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    const UNINIT: ::std::mem::MaybeUninit<exception> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
pub const WbJointType_WB_ROTATIONAL: WbJointType = 0;
pub const WbJointType_WB_LINEAR: WbJointType = 1;
pub type WbJointType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_accelerometer_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_accelerometer_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_accelerometer_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_accelerometer_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_accelerometer_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_accelerometer_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_altimeter_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_altimeter_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_altimeter_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_altimeter_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_brake_set_damping_constant(tag: WbDeviceTag, damping_constant: f64);
}
extern "C" {
    pub fn wb_brake_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    pub fn wb_brake_get_motor(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_brake_get_position_sensor(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbCameraRecognitionObject {
    pub id: ::std::os::raw::c_int,
    pub position: [f64; 3usize],
    pub orientation: [f64; 4usize],
    pub size: [f64; 2usize],
    pub position_on_image: [::std::os::raw::c_int; 2usize],
    pub size_on_image: [::std::os::raw::c_int; 2usize],
    pub number_of_colors: ::std::os::raw::c_int,
    pub colors: *mut f64,
    pub model: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WbCameraRecognitionObject() {
    const UNINIT: ::std::mem::MaybeUninit<WbCameraRecognitionObject> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WbCameraRecognitionObject>(),
        120usize,
        concat!("Size of: ", stringify!(WbCameraRecognitionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<WbCameraRecognitionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(WbCameraRecognitionObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position_on_image) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(position_on_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size_on_image) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(size_on_image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number_of_colors) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(number_of_colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colors) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(model)
        )
    );
}
extern "C" {
    pub fn wb_camera_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_camera_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_get_image(tag: WbDeviceTag) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wb_camera_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_max_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_min_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_set_fov(tag: WbDeviceTag, fov: f64);
}
extern "C" {
    pub fn wb_camera_get_exposure(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_set_exposure(tag: WbDeviceTag, exposure: f64);
}
extern "C" {
    pub fn wb_camera_get_focal_length(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_max_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_get_min_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_set_focal_distance(tag: WbDeviceTag, focal_distance: f64);
}
extern "C" {
    pub fn wb_camera_get_near(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_camera_save_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_has_recognition(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_camera_recognition_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_camera_recognition_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_recognition_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_recognition_get_number_of_objects(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_camera_recognition_get_objects(tag: WbDeviceTag) -> *const WbCameraRecognitionObject;
}
extern "C" {
    pub fn wb_camera_recognition_has_segmentation(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_camera_recognition_enable_segmentation(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_recognition_disable_segmentation(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_camera_recognition_is_segmentation_enabled(
        tag: WbDeviceTag,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_camera_recognition_get_segmentation_image(
        tag: WbDeviceTag,
    ) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn wb_camera_recognition_save_segmentation_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_compass_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_compass_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_compass_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_compass_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_compass_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_compass_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_connector_enable_presence(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_connector_disable_presence(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_connector_get_presence_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_connector_get_presence(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_connector_lock(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_connector_unlock(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_connector_is_locked(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_console_print(text: *const ::std::os::raw::c_char, stream: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbContactPoint {
    pub point: [f64; 3usize],
    pub node_id: ::std::os::raw::c_int,
    pub padding: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WbContactPoint() {
    const UNINIT: ::std::mem::MaybeUninit<WbContactPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WbContactPoint>(),
        32usize,
        concat!("Size of: ", stringify!(WbContactPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<WbContactPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(WbContactPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbContactPoint),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbContactPoint),
            "::",
            stringify!(node_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WbContactPoint),
            "::",
            stringify!(padding)
        )
    );
}
pub const WbNodeType_WB_NODE_NO_NODE: WbNodeType = 0;
pub const WbNodeType_WB_NODE_APPEARANCE: WbNodeType = 1;
pub const WbNodeType_WB_NODE_BACKGROUND: WbNodeType = 2;
pub const WbNodeType_WB_NODE_BILLBOARD: WbNodeType = 3;
pub const WbNodeType_WB_NODE_BOX: WbNodeType = 4;
pub const WbNodeType_WB_NODE_CAD_SHAPE: WbNodeType = 5;
pub const WbNodeType_WB_NODE_CAPSULE: WbNodeType = 6;
pub const WbNodeType_WB_NODE_COLOR: WbNodeType = 7;
pub const WbNodeType_WB_NODE_CONE: WbNodeType = 8;
pub const WbNodeType_WB_NODE_COORDINATE: WbNodeType = 9;
pub const WbNodeType_WB_NODE_CYLINDER: WbNodeType = 10;
pub const WbNodeType_WB_NODE_DIRECTIONAL_LIGHT: WbNodeType = 11;
pub const WbNodeType_WB_NODE_ELEVATION_GRID: WbNodeType = 12;
pub const WbNodeType_WB_NODE_FOG: WbNodeType = 13;
pub const WbNodeType_WB_NODE_GROUP: WbNodeType = 14;
pub const WbNodeType_WB_NODE_IMAGE_TEXTURE: WbNodeType = 15;
pub const WbNodeType_WB_NODE_INDEXED_FACE_SET: WbNodeType = 16;
pub const WbNodeType_WB_NODE_INDEXED_LINE_SET: WbNodeType = 17;
pub const WbNodeType_WB_NODE_MATERIAL: WbNodeType = 18;
pub const WbNodeType_WB_NODE_MESH: WbNodeType = 19;
pub const WbNodeType_WB_NODE_MUSCLE: WbNodeType = 20;
pub const WbNodeType_WB_NODE_NORMAL: WbNodeType = 21;
pub const WbNodeType_WB_NODE_PBR_APPEARANCE: WbNodeType = 22;
pub const WbNodeType_WB_NODE_PLANE: WbNodeType = 23;
pub const WbNodeType_WB_NODE_POINT_LIGHT: WbNodeType = 24;
pub const WbNodeType_WB_NODE_POINT_SET: WbNodeType = 25;
pub const WbNodeType_WB_NODE_POSE: WbNodeType = 26;
pub const WbNodeType_WB_NODE_SHAPE: WbNodeType = 27;
pub const WbNodeType_WB_NODE_SPHERE: WbNodeType = 28;
pub const WbNodeType_WB_NODE_SPOT_LIGHT: WbNodeType = 29;
pub const WbNodeType_WB_NODE_TEXTURE_COORDINATE: WbNodeType = 30;
pub const WbNodeType_WB_NODE_TEXTURE_TRANSFORM: WbNodeType = 31;
pub const WbNodeType_WB_NODE_TRANSFORM: WbNodeType = 32;
pub const WbNodeType_WB_NODE_VIEWPOINT: WbNodeType = 33;
pub const WbNodeType_WB_NODE_ROBOT: WbNodeType = 34;
pub const WbNodeType_WB_NODE_ACCELEROMETER: WbNodeType = 35;
pub const WbNodeType_WB_NODE_ALTIMETER: WbNodeType = 36;
pub const WbNodeType_WB_NODE_BRAKE: WbNodeType = 37;
pub const WbNodeType_WB_NODE_CAMERA: WbNodeType = 38;
pub const WbNodeType_WB_NODE_COMPASS: WbNodeType = 39;
pub const WbNodeType_WB_NODE_CONNECTOR: WbNodeType = 40;
pub const WbNodeType_WB_NODE_DISPLAY: WbNodeType = 41;
pub const WbNodeType_WB_NODE_DISTANCE_SENSOR: WbNodeType = 42;
pub const WbNodeType_WB_NODE_EMITTER: WbNodeType = 43;
pub const WbNodeType_WB_NODE_GPS: WbNodeType = 44;
pub const WbNodeType_WB_NODE_GYRO: WbNodeType = 45;
pub const WbNodeType_WB_NODE_INERTIAL_UNIT: WbNodeType = 46;
pub const WbNodeType_WB_NODE_LED: WbNodeType = 47;
pub const WbNodeType_WB_NODE_LIDAR: WbNodeType = 48;
pub const WbNodeType_WB_NODE_LIGHT_SENSOR: WbNodeType = 49;
pub const WbNodeType_WB_NODE_LINEAR_MOTOR: WbNodeType = 50;
pub const WbNodeType_WB_NODE_PEN: WbNodeType = 51;
pub const WbNodeType_WB_NODE_POSITION_SENSOR: WbNodeType = 52;
pub const WbNodeType_WB_NODE_PROPELLER: WbNodeType = 53;
pub const WbNodeType_WB_NODE_RADAR: WbNodeType = 54;
pub const WbNodeType_WB_NODE_RANGE_FINDER: WbNodeType = 55;
pub const WbNodeType_WB_NODE_RECEIVER: WbNodeType = 56;
pub const WbNodeType_WB_NODE_ROTATIONAL_MOTOR: WbNodeType = 57;
pub const WbNodeType_WB_NODE_SKIN: WbNodeType = 58;
pub const WbNodeType_WB_NODE_SPEAKER: WbNodeType = 59;
pub const WbNodeType_WB_NODE_TOUCH_SENSOR: WbNodeType = 60;
pub const WbNodeType_WB_NODE_VACUUM_GRIPPER: WbNodeType = 61;
pub const WbNodeType_WB_NODE_BALL_JOINT: WbNodeType = 62;
pub const WbNodeType_WB_NODE_BALL_JOINT_PARAMETERS: WbNodeType = 63;
pub const WbNodeType_WB_NODE_CHARGER: WbNodeType = 64;
pub const WbNodeType_WB_NODE_CONTACT_PROPERTIES: WbNodeType = 65;
pub const WbNodeType_WB_NODE_DAMPING: WbNodeType = 66;
pub const WbNodeType_WB_NODE_FLUID: WbNodeType = 67;
pub const WbNodeType_WB_NODE_FOCUS: WbNodeType = 68;
pub const WbNodeType_WB_NODE_HINGE_JOINT: WbNodeType = 69;
pub const WbNodeType_WB_NODE_HINGE_JOINT_PARAMETERS: WbNodeType = 70;
pub const WbNodeType_WB_NODE_HINGE_2_JOINT: WbNodeType = 71;
pub const WbNodeType_WB_NODE_IMMERSION_PROPERTIES: WbNodeType = 72;
pub const WbNodeType_WB_NODE_JOINT_PARAMETERS: WbNodeType = 73;
pub const WbNodeType_WB_NODE_LENS: WbNodeType = 74;
pub const WbNodeType_WB_NODE_LENS_FLARE: WbNodeType = 75;
pub const WbNodeType_WB_NODE_PHYSICS: WbNodeType = 76;
pub const WbNodeType_WB_NODE_RECOGNITION: WbNodeType = 77;
pub const WbNodeType_WB_NODE_SLIDER_JOINT: WbNodeType = 78;
pub const WbNodeType_WB_NODE_SLOT: WbNodeType = 79;
pub const WbNodeType_WB_NODE_SOLID: WbNodeType = 80;
pub const WbNodeType_WB_NODE_SOLID_REFERENCE: WbNodeType = 81;
pub const WbNodeType_WB_NODE_TRACK: WbNodeType = 82;
pub const WbNodeType_WB_NODE_TRACK_WHEEL: WbNodeType = 83;
pub const WbNodeType_WB_NODE_WORLD_INFO: WbNodeType = 84;
pub const WbNodeType_WB_NODE_ZOOM: WbNodeType = 85;
pub const WbNodeType_WB_NODE_MICROPHONE: WbNodeType = 86;
pub const WbNodeType_WB_NODE_RADIO: WbNodeType = 87;
pub type WbNodeType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_node_get_name(t: WbNodeType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_device_get_name(dt: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_device_get_model(dt: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_device_get_node_type(dt: WbDeviceTag) -> WbNodeType;
}
extern "C" {
    pub fn wb_device_get_type(dt: WbDeviceTag) -> WbNodeType;
}
extern "C" {
    pub fn wb_display_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_display_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_display_set_color(tag: WbDeviceTag, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_display_set_alpha(tag: WbDeviceTag, alpha: f64);
}
extern "C" {
    pub fn wb_display_set_opacity(tag: WbDeviceTag, opacity: f64);
}
extern "C" {
    pub fn wb_display_set_font(
        tag: WbDeviceTag,
        font: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        anti_aliasing: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_display_attach_camera(tag: WbDeviceTag, camera_tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_display_detach_camera(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_display_draw_pixel(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_line(
        tag: WbDeviceTag,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_rectangle(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_oval(
        tag: WbDeviceTag,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_polygon(
        tag: WbDeviceTag,
        x: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_draw_text(
        tag: WbDeviceTag,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_fill_rectangle(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_fill_oval(
        tag: WbDeviceTag,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_fill_polygon(
        tag: WbDeviceTag,
        x: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_display_image_new(
        tag: WbDeviceTag,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        format: ::std::os::raw::c_int,
    ) -> WbImageRef;
}
extern "C" {
    pub fn wb_display_image_copy(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> WbImageRef;
}
extern "C" {
    pub fn wb_display_image_load(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
    ) -> WbImageRef;
}
extern "C" {
    pub fn wb_display_image_delete(tag: WbDeviceTag, ir: WbImageRef);
}
extern "C" {
    pub fn wb_display_image_paste(
        tag: WbDeviceTag,
        ir: WbImageRef,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        blend: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_display_image_save(
        tag: WbDeviceTag,
        ir: WbImageRef,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_distance_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_distance_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_distance_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_distance_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_max_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_min_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_aperture(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_distance_sensor_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_distance_sensor_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_GENERIC: WbDistanceSensorType = 0;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_INFRA_RED: WbDistanceSensorType = 1;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_SONAR: WbDistanceSensorType = 2;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_LASER: WbDistanceSensorType = 3;
pub type WbDistanceSensorType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_distance_sensor_get_type(tag: WbDeviceTag) -> WbDistanceSensorType;
}
extern "C" {
    pub fn wb_emitter_send(
        tag: WbDeviceTag,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_emitter_get_buffer_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_emitter_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_emitter_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_emitter_get_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_emitter_set_range(tag: WbDeviceTag, range: f64);
}
extern "C" {
    pub fn wb_gps_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_gps_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_gps_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_gps_get_speed(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_gps_get_speed_vector(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_gps_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_gps_convert_to_degrees_minutes_seconds(
        decimal_degrees: f64,
    ) -> *const ::std::os::raw::c_char;
}
pub const WbGpsCoordinateSystem_WB_GPS_LOCAL_COORDINATE: WbGpsCoordinateSystem = 0;
pub const WbGpsCoordinateSystem_WB_GPS_WGS84_COORDINATE: WbGpsCoordinateSystem = 1;
pub type WbGpsCoordinateSystem = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_gps_get_coordinate_system(tag: WbDeviceTag) -> WbGpsCoordinateSystem;
}
extern "C" {
    pub fn wb_gyro_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_gyro_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_gyro_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_gyro_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_gyro_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_gyro_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_inertial_unit_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_inertial_unit_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_inertial_unit_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_inertial_unit_get_noise(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_inertial_unit_get_roll_pitch_yaw(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_inertial_unit_get_quaternion(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_joystick_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_joystick_disable();
}
extern "C" {
    pub fn wb_joystick_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_is_connected() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_joystick_get_model() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_joystick_get_number_of_axes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_axis_value(axis: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_number_of_povs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_pov_value(pov: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_get_pressed_button() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_joystick_set_constant_force(level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_joystick_set_constant_force_duration(duration: f64);
}
extern "C" {
    pub fn wb_joystick_set_auto_centering_gain(gain: f64);
}
extern "C" {
    pub fn wb_joystick_set_resistance_gain(gain: f64);
}
extern "C" {
    pub fn wb_joystick_set_force_axis(axis: ::std::os::raw::c_int);
}
pub const WB_KEYBOARD_END: _bindgen_ty_1 = 312;
pub const WB_KEYBOARD_HOME: _bindgen_ty_1 = 313;
pub const WB_KEYBOARD_LEFT: _bindgen_ty_1 = 314;
pub const WB_KEYBOARD_UP: _bindgen_ty_1 = 315;
pub const WB_KEYBOARD_RIGHT: _bindgen_ty_1 = 316;
pub const WB_KEYBOARD_DOWN: _bindgen_ty_1 = 317;
pub const WB_KEYBOARD_PAGEUP: _bindgen_ty_1 = 366;
pub const WB_KEYBOARD_PAGEDOWN: _bindgen_ty_1 = 367;
pub const WB_KEYBOARD_NUMPAD_HOME: _bindgen_ty_1 = 375;
pub const WB_KEYBOARD_NUMPAD_LEFT: _bindgen_ty_1 = 376;
pub const WB_KEYBOARD_NUMPAD_UP: _bindgen_ty_1 = 377;
pub const WB_KEYBOARD_NUMPAD_RIGHT: _bindgen_ty_1 = 378;
pub const WB_KEYBOARD_NUMPAD_DOWN: _bindgen_ty_1 = 379;
pub const WB_KEYBOARD_NUMPAD_END: _bindgen_ty_1 = 382;
pub const WB_KEYBOARD_KEY: _bindgen_ty_1 = 65535;
pub const WB_KEYBOARD_SHIFT: _bindgen_ty_1 = 65536;
pub const WB_KEYBOARD_CONTROL: _bindgen_ty_1 = 131072;
pub const WB_KEYBOARD_ALT: _bindgen_ty_1 = 262144;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_keyboard_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_keyboard_disable();
}
extern "C" {
    pub fn wb_keyboard_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_keyboard_get_key() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_led_set(tag: WbDeviceTag, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_led_get(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbLidarPoint {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub layer_id: ::std::os::raw::c_int,
    pub time: f32,
}
#[test]
fn bindgen_test_layout_WbLidarPoint() {
    const UNINIT: ::std::mem::MaybeUninit<WbLidarPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WbLidarPoint>(),
        20usize,
        concat!("Size of: ", stringify!(WbLidarPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<WbLidarPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(WbLidarPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layer_id) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(time)
        )
    );
}
extern "C" {
    pub fn wb_lidar_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_lidar_enable_point_cloud(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_lidar_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_lidar_disable_point_cloud(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_lidar_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_is_point_cloud_enabled(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_lidar_get_range_image(tag: WbDeviceTag) -> *const f32;
}
extern "C" {
    pub fn wb_lidar_get_layer_range_image(
        tag: WbDeviceTag,
        layer: ::std::os::raw::c_int,
    ) -> *const f32;
}
extern "C" {
    pub fn wb_lidar_get_point_cloud(tag: WbDeviceTag) -> *const WbLidarPoint;
}
extern "C" {
    pub fn wb_lidar_get_layer_point_cloud(
        tag: WbDeviceTag,
        layer: ::std::os::raw::c_int,
    ) -> *const WbLidarPoint;
}
extern "C" {
    pub fn wb_lidar_get_number_of_points(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_get_horizontal_resolution(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_get_number_of_layers(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_lidar_get_min_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_max_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_set_frequency(tag: WbDeviceTag, frequency: f64);
}
extern "C" {
    pub fn wb_lidar_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_vertical_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_lidar_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_light_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_light_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_light_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_light_sensor_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_light_sensor_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_light_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_microphone_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_microphone_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_microphone_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_microphone_get_sample_data(tag: WbDeviceTag) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn wb_microphone_get_sample_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_motor_set_position(tag: WbDeviceTag, position: f64);
}
extern "C" {
    pub fn wb_motor_set_acceleration(tag: WbDeviceTag, acceleration: f64);
}
extern "C" {
    pub fn wb_motor_set_velocity(tag: WbDeviceTag, velocity: f64);
}
extern "C" {
    pub fn wb_motor_set_force(tag: WbDeviceTag, force: f64);
}
extern "C" {
    pub fn wb_motor_set_torque(tag: WbDeviceTag, torque: f64);
}
extern "C" {
    pub fn wb_motor_set_available_force(tag: WbDeviceTag, force: f64);
}
extern "C" {
    pub fn wb_motor_set_available_torque(tag: WbDeviceTag, torque: f64);
}
extern "C" {
    pub fn wb_motor_set_control_pid(tag: WbDeviceTag, p: f64, i: f64, d: f64);
}
extern "C" {
    pub fn wb_motor_enable_force_feedback(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_motor_disable_force_feedback(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_motor_get_force_feedback_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_motor_get_force_feedback(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_enable_torque_feedback(
        tag: WbDeviceTag,
        sampling_period: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_motor_disable_torque_feedback(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_motor_get_torque_feedback_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_motor_get_torque_feedback(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    pub fn wb_motor_get_target_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_min_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_velocity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_velocity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_acceleration(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_available_force(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_force(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_available_torque(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_max_torque(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_multiplier(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_motor_get_brake(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_motor_get_position_sensor(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbMouseState {
    pub u: f64,
    pub v: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub left: ::std::os::raw::c_char,
    pub middle: ::std::os::raw::c_char,
    pub right: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WbMouseState() {
    const UNINIT: ::std::mem::MaybeUninit<WbMouseState> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WbMouseState>(),
        48usize,
        concat!("Size of: ", stringify!(WbMouseState))
    );
    assert_eq!(
        ::std::mem::align_of::<WbMouseState>(),
        8usize,
        concat!("Alignment of ", stringify!(WbMouseState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).middle) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(middle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(right)
        )
    );
}
extern "C" {
    pub fn wb_mouse_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_mouse_disable();
}
extern "C" {
    pub fn wb_mouse_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_mouse_enable_3d_position();
}
extern "C" {
    pub fn wb_mouse_disable_3d_position();
}
extern "C" {
    pub fn wb_mouse_is_3d_position_enabled() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_mouse_get_state() -> WbMouseState;
}
extern "C" {
    pub fn wb_pen_write(tag: WbDeviceTag, write: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_pen_set_ink_color(tag: WbDeviceTag, color: ::std::os::raw::c_int, density: f64);
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mbstate8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mbstateL) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    const UNINIT: ::std::mem::MaybeUninit<__darwin_pthread_handler_rec> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_attr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_cond_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_condattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutex_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_mutexattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_once_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlock_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_rwlockattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    const UNINIT: ::std::mem::MaybeUninit<_opaque_pthread_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__sig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cleanup_stack) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__opaque) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_wwi_send(data: *const ::std::os::raw::c_char, size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_robot_wwi_receive(size: *mut ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_wwi_receive_text() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_default_robot_window_configure();
}
extern "C" {
    pub fn wbu_default_robot_window_update();
}
extern "C" {
    pub fn wbu_default_robot_window_set_images_max_size(
        max_width: ::std::os::raw::c_int,
        max_height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbu_generic_robot_window_parse_device_command(
        token: *mut ::std::os::raw::c_char,
        tokens: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wbu_generic_robot_window_parse_device_control_command(
        first_token: *mut ::std::os::raw::c_char,
        tokens: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_generic_robot_window_handle_messages(
        message: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_generic_robot_window_init();
}
extern "C" {
    pub fn wbu_generic_robot_window_update();
}
extern "C" {
    pub fn wbu_generic_robot_window_is_hidden() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_generic_robot_window_refresh_rate() -> f64;
}
extern "C" {
    pub fn wbu_generic_robot_window_needs_update() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_window_custom_function(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wb_position_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_position_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_position_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_position_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_position_sensor_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    pub fn wb_position_sensor_get_motor(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_position_sensor_get_brake(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbRadarTarget {
    pub distance: f64,
    pub received_power: f64,
    pub speed: f64,
    pub azimuth: f64,
}
#[test]
fn bindgen_test_layout_WbRadarTarget() {
    const UNINIT: ::std::mem::MaybeUninit<WbRadarTarget> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WbRadarTarget>(),
        32usize,
        concat!("Size of: ", stringify!(WbRadarTarget))
    );
    assert_eq!(
        ::std::mem::align_of::<WbRadarTarget>(),
        8usize,
        concat!("Alignment of ", stringify!(WbRadarTarget))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).received_power) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(received_power)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).azimuth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(azimuth)
        )
    );
}
extern "C" {
    pub fn wb_radar_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radar_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_radar_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radar_get_number_of_targets(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radar_get_targets(tag: WbDeviceTag) -> *const WbRadarTarget;
}
extern "C" {
    pub fn wb_radar_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radar_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radar_get_horizontal_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radar_get_vertical_fov(tag: WbDeviceTag) -> f64;
}
pub type WbRadioMessage = *mut ::std::os::raw::c_void;
pub type WbRadioEvent = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn wb_radio_message_new(
        length: ::std::os::raw::c_int,
        body: *const ::std::os::raw::c_char,
        destination: *const ::std::os::raw::c_char,
    ) -> WbRadioMessage;
}
extern "C" {
    pub fn wb_radio_message_delete(arg1: WbRadioMessage);
}
extern "C" {
    pub fn wb_radio_message_get_destination(arg1: WbRadioMessage) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_message_get_length(arg1: WbRadioMessage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_message_get_body(arg1: WbRadioMessage) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radio_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_radio_set_address(tag: WbDeviceTag, address: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_radio_get_address(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_set_frequency(tag: WbDeviceTag, hz: f64);
}
extern "C" {
    pub fn wb_radio_get_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radio_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radio_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_set_bitrate(tag: WbDeviceTag, bits_per_second: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_radio_get_bitrate(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_set_rx_sensitivity(tag: WbDeviceTag, dBm: f64);
}
extern "C" {
    pub fn wb_radio_get_rx_sensitivity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radio_set_tx_power(tag: WbDeviceTag, dBm: f64);
}
extern "C" {
    pub fn wb_radio_get_tx_power(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_radio_set_callback(
        tag: WbDeviceTag,
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: WbRadioEvent)>,
    );
}
extern "C" {
    pub fn wb_radio_event_get_radio(arg1: WbRadioEvent) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_radio_event_get_data(arg1: WbRadioEvent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_event_get_data_size(arg1: WbRadioEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_radio_event_get_emitter(arg1: WbRadioEvent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_radio_event_get_rssi(arg1: WbRadioEvent) -> f64;
}
extern "C" {
    pub fn wb_radio_send(tag: WbDeviceTag, arg1: WbRadioMessage, delay: f64);
}
extern "C" {
    pub fn wb_range_finder_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_range_finder_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_range_finder_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_range_finder_get_range_image(tag: WbDeviceTag) -> *const f32;
}
extern "C" {
    pub fn wb_range_finder_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_range_finder_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_range_finder_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_range_finder_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_range_finder_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_range_finder_save_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_receiver_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_receiver_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_receiver_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_get_queue_length(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_next_packet(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_receiver_get_data_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_receiver_get_data(tag: WbDeviceTag) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn wb_receiver_get_signal_strength(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_receiver_get_emitter_direction(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_remote_control_custom_function(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wbr_robot_battery_sensor_set_value(value: f64);
}
extern "C" {
    pub fn wbr_accelerometer_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_camera_recognition_set_object(
        tag: WbDeviceTag,
        objects: *const WbCameraRecognitionObject,
        object_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbr_compass_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_distance_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_gps_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_gps_set_speed(tag: WbDeviceTag, speed: f64);
}
extern "C" {
    pub fn wbr_gps_set_velocity_vector(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_gyro_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_inertial_unit_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_light_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_microphone_set_buffer(
        tag: WbDeviceTag,
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbr_motor_set_position_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_motor_set_force_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_motor_set_torque_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_position_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_radar_set_targets(
        tag: WbDeviceTag,
        targets: *const WbRadarTarget,
        target_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wbr_touch_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    pub fn wbr_touch_sensor_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    pub fn wbr_display_save_image(
        tag: WbDeviceTag,
        id: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        image: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn wbr_camera_set_image(tag: WbDeviceTag, image: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn wbr_camera_get_image_buffer(tag: WbDeviceTag) -> *mut ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbrInterface {
    pub mandatory: WbrInterface__bindgen_ty_1,
    pub wbr_custom_function: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub wbr_robot_battery_set_sampling_period:
        ::std::option::Option<unsafe extern "C" fn(sampling_period: ::std::os::raw::c_int)>,
    pub wbr_set_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_camera_set_fov: ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, fov: f64)>,
    pub wbr_camera_set_exposure:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, exposure: f64)>,
    pub wbr_camera_set_focal_distance:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, focal_distance: f64)>,
    pub wbr_led_set:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, state: ::std::os::raw::c_int)>,
    pub wbr_pen_set_ink_color: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, color: ::std::os::raw::c_int, density: f64),
    >,
    pub wbr_pen_write: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, write: ::std::os::raw::c_char),
    >,
    pub wbr_speaker_emit_sample: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            data: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_motor_set_force_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_motor_set_torque_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_motor_set_position:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, position: f64)>,
    pub wbr_motor_set_acceleration:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, acceleration: f64)>,
    pub wbr_motor_set_velocity:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, velocity: f64)>,
    pub wbr_motor_set_force:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, force: f64)>,
    pub wbr_motor_set_torque:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, torque: f64)>,
    pub wbr_motor_set_available_force:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, available_force: f64)>,
    pub wbr_motor_set_available_torque:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, available_torque: f64)>,
    pub wbr_motor_set_control_pid:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, p: f64, i: f64, d: f64)>,
    pub wbr_display_set_color:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, color: ::std::os::raw::c_int)>,
    pub wbr_display_set_alpha:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, alpha: f64)>,
    pub wbr_display_set_opacity:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, opacity: f64)>,
    pub wbr_display_draw_pixel: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
    >,
    pub wbr_display_draw_line: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_rectangle: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_oval: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_polygon: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: *const ::std::os::raw::c_int,
            y: *const ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_text: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            txt: *const ::std::os::raw::c_char,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_rectangle: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_oval: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_polygon: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: *const ::std::os::raw::c_int,
            y: *const ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_new: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            format: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_copy: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_delete:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, id: ::std::os::raw::c_int)>,
    pub wbr_display_image_paste: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_save:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, id: ::std::os::raw::c_int)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbrInterface__bindgen_ty_1 {
    pub wbr_start: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_char,
    >,
    pub wbr_stop: ::std::option::Option<unsafe extern "C" fn()>,
    pub wbr_has_failed: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_char>,
    pub wbr_stop_actuators: ::std::option::Option<unsafe extern "C" fn()>,
    pub wbr_robot_step: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_WbrInterface__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<WbrInterface__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WbrInterface__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(WbrInterface__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<WbrInterface__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(WbrInterface__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_stop) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_stop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_has_failed) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_has_failed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_stop_actuators) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_stop_actuators)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_robot_step) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_robot_step)
        )
    );
}
#[test]
fn bindgen_test_layout_WbrInterface() {
    const UNINIT: ::std::mem::MaybeUninit<WbrInterface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WbrInterface>(),
        336usize,
        concat!("Size of: ", stringify!(WbrInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<WbrInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(WbrInterface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mandatory) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(mandatory)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_custom_function) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_custom_function)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wbr_robot_battery_set_sampling_period) as usize
                - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_robot_battery_set_sampling_period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_set_sampling_period) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_set_sampling_period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_camera_set_fov) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_fov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_camera_set_exposure) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_exposure)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wbr_camera_set_focal_distance) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_focal_distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_led_set) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_led_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_pen_set_ink_color) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_pen_set_ink_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_pen_write) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_pen_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_speaker_emit_sample) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_speaker_emit_sample)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wbr_motor_set_force_sampling_period) as usize - ptr as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_force_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wbr_motor_set_torque_sampling_period) as usize
                - ptr as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_torque_sampling_period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_motor_set_position) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_motor_set_acceleration) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_acceleration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_motor_set_velocity) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_velocity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_motor_set_force) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_force)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_motor_set_torque) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_torque)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wbr_motor_set_available_force) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_available_force)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wbr_motor_set_available_torque) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_available_torque)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_motor_set_control_pid) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_control_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_set_color) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_set_alpha) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_set_opacity) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_draw_pixel) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_pixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_draw_line) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_line)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_draw_rectangle) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_rectangle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_draw_oval) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_oval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_draw_polygon) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_polygon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_draw_text) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_fill_rectangle) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_rectangle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_fill_oval) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_oval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_fill_polygon) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_polygon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_image_new) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_image_copy) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_image_delete) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_delete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_image_paste) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_paste)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wbr_display_image_save) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_save)
        )
    );
}
pub type WbMutexRef = *mut ::std::os::raw::c_void;
pub const WbRobotMode_WB_MODE_SIMULATION: WbRobotMode = 0;
pub const WbRobotMode_WB_MODE_CROSS_COMPILATION: WbRobotMode = 1;
pub const WbRobotMode_WB_MODE_REMOTE_CONTROL: WbRobotMode = 2;
pub type WbRobotMode = ::std::os::raw::c_uint;
pub const WbUserInputEvent_WB_EVENT_QUIT: WbUserInputEvent = -1;
pub const WbUserInputEvent_WB_EVENT_NO_EVENT: WbUserInputEvent = 0;
pub const WbUserInputEvent_WB_EVENT_MOUSE_CLICK: WbUserInputEvent = 1;
pub const WbUserInputEvent_WB_EVENT_MOUSE_MOVE: WbUserInputEvent = 2;
pub const WbUserInputEvent_WB_EVENT_KEYBOARD: WbUserInputEvent = 4;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_BUTTON: WbUserInputEvent = 8;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_AXIS: WbUserInputEvent = 16;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_POV: WbUserInputEvent = 32;
pub type WbUserInputEvent = ::std::os::raw::c_int;
extern "C" {
    pub fn wb_robot_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_step_begin(duration: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_step_end() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_step(duration: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_wait_for_user_input_event(
        event_type: WbUserInputEvent,
        timeout: ::std::os::raw::c_int,
    ) -> WbUserInputEvent;
}
extern "C" {
    pub fn wb_robot_cleanup();
}
extern "C" {
    pub fn wb_robot_get_time() -> f64;
}
extern "C" {
    pub fn wb_robot_get_urdf(
        prefix: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_model() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_custom_data() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_set_custom_data(data: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_robot_get_mode() -> WbRobotMode;
}
extern "C" {
    pub fn wb_robot_set_mode(mode: WbRobotMode, arg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_robot_get_synchronization() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_supervisor() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_project_path() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_world_path() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_basic_time_step() -> f64;
}
extern "C" {
    pub fn wb_robot_get_device(name: *const ::std::os::raw::c_char) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_robot_get_number_of_devices() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_get_device_by_index(index: ::std::os::raw::c_int) -> WbDeviceTag;
}
extern "C" {
    pub fn wb_robot_battery_sensor_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_robot_battery_sensor_disable();
}
extern "C" {
    pub fn wb_robot_battery_sensor_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_robot_battery_sensor_get_value() -> f64;
}
extern "C" {
    pub fn wb_robot_task_new(
        task: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        param: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn wb_robot_mutex_new() -> WbMutexRef;
}
extern "C" {
    pub fn wb_robot_mutex_lock(arg1: WbMutexRef);
}
extern "C" {
    pub fn wb_robot_mutex_unlock(arg1: WbMutexRef);
}
extern "C" {
    pub fn wb_robot_mutex_delete(arg1: WbMutexRef);
}
extern "C" {
    pub fn wb_robot_pin_to_static_environment(pin: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_robot_get_controller_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_get_data() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_robot_set_data(data: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_skin_set_bone_orientation(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        orientation: *const f64,
        absolute: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_skin_set_bone_position(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        position: *const f64,
        absolute: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_skin_get_bone_count(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_skin_get_bone_name(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_skin_get_bone_orientation(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_char,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_skin_get_bone_position(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_char,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_speaker_play_sound(
        left: WbDeviceTag,
        right: WbDeviceTag,
        sound: *const ::std::os::raw::c_char,
        volume: f64,
        pitch: f64,
        balance: f64,
        loop_: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_speaker_stop(tag: WbDeviceTag, sound: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_speaker_is_sound_playing(
        tag: WbDeviceTag,
        sound: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_set_engine(
        tag: WbDeviceTag,
        engine: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_set_language(
        tag: WbDeviceTag,
        language: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_get_engine(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_get_language(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_speaker_speak(tag: WbDeviceTag, text: *const ::std::os::raw::c_char, volume: f64);
}
extern "C" {
    pub fn wb_speaker_is_speaking(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
pub const WbFieldType_WB_NO_FIELD: WbFieldType = 0;
pub const WbFieldType_WB_SF_BOOL: WbFieldType = 1;
pub const WbFieldType_WB_SF_INT32: WbFieldType = 2;
pub const WbFieldType_WB_SF_FLOAT: WbFieldType = 3;
pub const WbFieldType_WB_SF_VEC2F: WbFieldType = 4;
pub const WbFieldType_WB_SF_VEC3F: WbFieldType = 5;
pub const WbFieldType_WB_SF_ROTATION: WbFieldType = 6;
pub const WbFieldType_WB_SF_COLOR: WbFieldType = 7;
pub const WbFieldType_WB_SF_STRING: WbFieldType = 8;
pub const WbFieldType_WB_SF_NODE: WbFieldType = 9;
pub const WbFieldType_WB_MF: WbFieldType = 16;
pub const WbFieldType_WB_MF_BOOL: WbFieldType = 17;
pub const WbFieldType_WB_MF_INT32: WbFieldType = 18;
pub const WbFieldType_WB_MF_FLOAT: WbFieldType = 19;
pub const WbFieldType_WB_MF_VEC2F: WbFieldType = 20;
pub const WbFieldType_WB_MF_VEC3F: WbFieldType = 21;
pub const WbFieldType_WB_MF_ROTATION: WbFieldType = 22;
pub const WbFieldType_WB_MF_COLOR: WbFieldType = 23;
pub const WbFieldType_WB_MF_STRING: WbFieldType = 24;
pub const WbFieldType_WB_MF_NODE: WbFieldType = 25;
pub type WbFieldType = ::std::os::raw::c_uint;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_PAUSE: WbSimulationMode = 0;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_REAL_TIME: WbSimulationMode = 1;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_FAST: WbSimulationMode = 2;
pub type WbSimulationMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_supervisor_world_load(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_supervisor_world_save(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_world_reload();
}
extern "C" {
    pub fn wb_supervisor_simulation_quit(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_simulation_reset();
}
extern "C" {
    pub fn wb_supervisor_simulation_reset_physics();
}
extern "C" {
    pub fn wb_supervisor_simulation_get_mode() -> WbSimulationMode;
}
extern "C" {
    pub fn wb_supervisor_simulation_set_mode(mode: WbSimulationMode);
}
extern "C" {
    pub fn wb_supervisor_set_label(
        id: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: f64,
        y: f64,
        size: f64,
        color: ::std::os::raw::c_int,
        transparency: f64,
        font: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_export_image(
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_movie_start_recording(
        filename: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        codec: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
        caption: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_movie_stop_recording();
}
extern "C" {
    pub fn wb_supervisor_movie_is_ready() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_movie_failed() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_animation_start_recording(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_animation_stop_recording() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_root() -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_self() -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_id(node: WbNodeRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_id(id: ::std::os::raw::c_int) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_device(tag: WbDeviceTag) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_def(def: *const ::std::os::raw::c_char) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_from_proto_def(
        node: WbNodeRef,
        def: *const ::std::os::raw::c_char,
    ) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_parent_node(node: WbNodeRef) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_selected() -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_type(node: WbNodeRef) -> WbNodeType;
}
extern "C" {
    pub fn wb_supervisor_node_get_field(
        node: WbNodeRef,
        field_name: *const ::std::os::raw::c_char,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_field_by_index(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_number_of_fields(node: WbNodeRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_get_proto_field(
        node: WbNodeRef,
        field_name: *const ::std::os::raw::c_char,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_proto_field_by_index(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> WbFieldRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_proto_number_of_fields(node: WbNodeRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_remove(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_save_state(
        node: WbNodeRef,
        state_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_load_state(
        node: WbNodeRef,
        state_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_set_joint_position(
        node: WbNodeRef,
        position: f64,
        index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_node_get_def(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_type_name(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_base_type_name(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_is_proto(node: WbNodeRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_center_of_mass(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_contact_point(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_contact_point_node(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_node_get_number_of_contact_points(
        node: WbNodeRef,
        include_descendants: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_node_get_contact_points(
        node: WbNodeRef,
        include_descendants: ::std::os::raw::c_char,
        size: *mut ::std::os::raw::c_int,
    ) -> *mut WbContactPoint;
}
extern "C" {
    pub fn wb_supervisor_node_get_orientation(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_position(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_pose(node: WbNodeRef, from_node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_get_static_balance(node: WbNodeRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_get_velocity(node: WbNodeRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_set_velocity(node: WbNodeRef, velocity: *const f64);
}
extern "C" {
    pub fn wb_supervisor_node_reset_physics(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_restart_controller(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_export_string(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_node_move_viewpoint(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_set_visibility(
        node: WbNodeRef,
        from: WbNodeRef,
        visible: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_add_force(
        node: WbNodeRef,
        force: *const f64,
        relative: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_add_force_with_offset(
        node: WbNodeRef,
        force: *const f64,
        offset: *const f64,
        relative: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_add_torque(
        node: WbNodeRef,
        torque: *const f64,
        relative: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_get_name(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_type(field: WbFieldRef) -> WbFieldType;
}
extern "C" {
    pub fn wb_supervisor_field_get_type_name(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_count(field: WbFieldRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_field_enable_sf_tracking(
        field: WbFieldRef,
        sampling_period: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_field_disable_sf_tracking(field: WbFieldRef);
}
extern "C" {
    pub fn wb_supervisor_node_enable_pose_tracking(
        node: WbNodeRef,
        sampling_period: ::std::os::raw::c_int,
        from_node: WbNodeRef,
    );
}
extern "C" {
    pub fn wb_supervisor_node_disable_pose_tracking(node: WbNodeRef, from_node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_node_enable_contact_points_tracking(
        node: WbNodeRef,
        sampling_period: ::std::os::raw::c_int,
        include_descendants: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_disable_contact_points_tracking(node: WbNodeRef);
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_bool(field: WbFieldRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_int32(field: WbFieldRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_float(field: WbFieldRef) -> f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_vec2f(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_vec3f(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_rotation(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_color(field: WbFieldRef) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_string(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_sf_node(field: WbFieldRef) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_float(field: WbFieldRef, index: ::std::os::raw::c_int)
        -> f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_get_mf_node(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> WbNodeRef;
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_bool(field: WbFieldRef, value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_int32(field: WbFieldRef, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_float(field: WbFieldRef, value: f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_vec2f(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_vec3f(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_rotation(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_color(field: WbFieldRef, values: *const f64);
}
extern "C" {
    pub fn wb_supervisor_field_set_sf_string(
        field: WbFieldRef,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_float(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_set_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_float(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    pub fn wb_supervisor_field_insert_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_remove_mf(field: WbFieldRef, index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_field_import_mf_node_from_string(
        field: WbFieldRef,
        position: ::std::os::raw::c_int,
        node_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_field_remove_sf(field: WbFieldRef);
}
extern "C" {
    pub fn wb_supervisor_field_import_sf_node_from_string(
        field: WbFieldRef,
        node_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_virtual_reality_headset_is_used() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_virtual_reality_headset_get_position() -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_virtual_reality_headset_get_orientation() -> *const f64;
}
extern "C" {
    pub fn wb_supervisor_node_enable_contact_point_tracking(
        node: WbNodeRef,
        sampling_period: ::std::os::raw::c_int,
        include_descendants: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_node_disable_contact_point_tracking(
        node: WbNodeRef,
        include_descendants: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_simulation_revert();
}
extern "C" {
    pub fn wb_supervisor_load_world(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn wb_supervisor_save_world(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wb_supervisor_field_remove_mf_node(field: WbFieldRef, position: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_supervisor_simulation_physics_reset();
}
extern "C" {
    pub fn wb_supervisor_movie_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_supervisor_start_movie(
        file: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        codec: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
        caption: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn wb_supervisor_stop_movie();
}
extern "C" {
    pub fn wb_supervisor_get_movie_status() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_touch_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wb_touch_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    pub fn wb_touch_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_touch_sensor_get_lookup_table_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wb_touch_sensor_get_lookup_table(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    pub fn wb_touch_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    pub fn wb_touch_sensor_get_values(tag: WbDeviceTag) -> *const f64;
}
pub const WbTouchSensorType_WB_TOUCH_SENSOR_BUMPER: WbTouchSensorType = 0;
pub const WbTouchSensorType_WB_TOUCH_SENSOR_FORCE: WbTouchSensorType = 1;
pub const WbTouchSensorType_WB_TOUCH_SENSOR_FORCE3D: WbTouchSensorType = 2;
pub type WbTouchSensorType = ::std::os::raw::c_uint;
extern "C" {
    pub fn wb_touch_sensor_get_type(tag: WbDeviceTag) -> WbTouchSensorType;
}
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    const UNINIT: ::std::mem::MaybeUninit<__sbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    const UNINIT: ::std::mem::MaybeUninit<__sFILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._p) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._r) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._file) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._bf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lbfsize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cookie) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._close) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._read) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._seek) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._write) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ub) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._extra) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ur) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ubuf) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._nbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lb) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._blksize) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_motion_new(filename: *const ::std::os::raw::c_char) -> WbMotionRef;
}
extern "C" {
    pub fn wbu_motion_delete(motion: WbMotionRef);
}
extern "C" {
    pub fn wbu_motion_play(motion: WbMotionRef);
}
extern "C" {
    pub fn wbu_motion_stop(motion: WbMotionRef);
}
extern "C" {
    pub fn wbu_motion_set_loop(motion: WbMotionRef, loop_: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_motion_set_reverse(motion: WbMotionRef, reverse: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_motion_is_over(motion: WbMotionRef) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_motion_get_duration(motion: WbMotionRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_motion_get_time(motion: WbMotionRef) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_motion_set_time(motion: WbMotionRef, time: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wbu_string_strsep(
        stringp: *mut *mut ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_string_replace(
        value: *mut ::std::os::raw::c_char,
        before: *mut ::std::os::raw::c_char,
        after: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_getenv(
        variable: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_short_path(
        path: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_tmpdir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_system_webots_instance_path(
        refresh: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub const WbuCarType_WBU_CAR_TRACTION: WbuCarType = 0;
pub const WbuCarType_WBU_CAR_PROPULSION: WbuCarType = 1;
pub const WbuCarType_WBU_CAR_FOUR_BY_FOUR: WbuCarType = 2;
pub type WbuCarType = ::std::os::raw::c_uint;
pub const WbuCarEngineType_WBU_CAR_COMBUSTION_ENGINE: WbuCarEngineType = 0;
pub const WbuCarEngineType_WBU_CAR_ELECTRIC_ENGINE: WbuCarEngineType = 1;
pub const WbuCarEngineType_WBU_CAR_PARALLEL_HYBRID_ENGINE: WbuCarEngineType = 2;
pub const WbuCarEngineType_WBU_CAR_POWER_SPLIT_HYBRID_ENGINE: WbuCarEngineType = 3;
pub type WbuCarEngineType = ::std::os::raw::c_uint;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_FRONT_RIGHT: WbuCarWheelIndex = 0;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_FRONT_LEFT: WbuCarWheelIndex = 1;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_REAR_RIGHT: WbuCarWheelIndex = 2;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_REAR_LEFT: WbuCarWheelIndex = 3;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_NB: WbuCarWheelIndex = 4;
pub type WbuCarWheelIndex = ::std::os::raw::c_uint;
extern "C" {
    pub fn wbu_car_init();
}
extern "C" {
    pub fn wbu_car_cleanup();
}
extern "C" {
    pub fn wbu_car_get_type() -> WbuCarType;
}
extern "C" {
    pub fn wbu_car_get_engine_type() -> WbuCarEngineType;
}
extern "C" {
    pub fn wbu_car_set_indicator_period(period: f64);
}
extern "C" {
    pub fn wbu_car_get_indicator_period() -> f64;
}
extern "C" {
    pub fn wbu_car_get_backwards_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_car_get_brake_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_car_get_track_front() -> f64;
}
extern "C" {
    pub fn wbu_car_get_track_rear() -> f64;
}
extern "C" {
    pub fn wbu_car_get_wheelbase() -> f64;
}
extern "C" {
    pub fn wbu_car_get_front_wheel_radius() -> f64;
}
extern "C" {
    pub fn wbu_car_get_rear_wheel_radius() -> f64;
}
extern "C" {
    pub fn wbu_car_get_wheel_encoder(wheel_index: WbuCarWheelIndex) -> f64;
}
extern "C" {
    pub fn wbu_car_get_wheel_speed(wheel_index: WbuCarWheelIndex) -> f64;
}
extern "C" {
    pub fn wbu_car_set_left_steering_angle(angle: f64);
}
extern "C" {
    pub fn wbu_car_set_right_steering_angle(angle: f64);
}
extern "C" {
    pub fn wbu_car_get_right_steering_angle() -> f64;
}
extern "C" {
    pub fn wbu_car_get_left_steering_angle() -> f64;
}
extern "C" {
    pub fn wbu_car_enable_limited_slip_differential(enable: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_car_enable_indicator_auto_disabling(enable: ::std::os::raw::c_char);
}
pub use self::WbuCarEngineType as wbu_car_engine_type;
pub use self::WbuCarType as wbu_car_type;
pub use self::WbuCarWheelIndex as wbu_car_wheel_index;
pub const WbuDriverIndicatorState_OFF: WbuDriverIndicatorState = 0;
pub const WbuDriverIndicatorState_RIGHT: WbuDriverIndicatorState = 1;
pub const WbuDriverIndicatorState_LEFT: WbuDriverIndicatorState = 2;
pub type WbuDriverIndicatorState = ::std::os::raw::c_uint;
pub const WbuDriverControlMode_UNDEFINED_CONTROL_MODE: WbuDriverControlMode = -1;
pub const WbuDriverControlMode_SPEED: WbuDriverControlMode = 0;
pub const WbuDriverControlMode_TORQUE: WbuDriverControlMode = 1;
pub type WbuDriverControlMode = ::std::os::raw::c_int;
pub const WbuDriverWiperMode_DOWN: WbuDriverWiperMode = 0;
pub const WbuDriverWiperMode_SLOW: WbuDriverWiperMode = 1;
pub const WbuDriverWiperMode_NORMAL: WbuDriverWiperMode = 2;
pub const WbuDriverWiperMode_FAST: WbuDriverWiperMode = 3;
pub type WbuDriverWiperMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn wbu_driver_initialization_is_possible() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_init();
}
extern "C" {
    pub fn wbu_driver_cleanup();
}
extern "C" {
    pub fn wbu_driver_step() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_driver_set_steering_angle(steering_angle: f64);
}
extern "C" {
    pub fn wbu_driver_get_steering_angle() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_cruising_speed(speed: f64);
}
extern "C" {
    pub fn wbu_driver_get_target_cruising_speed() -> f64;
}
extern "C" {
    pub fn wbu_driver_get_current_speed() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_throttle(throttle: f64);
}
extern "C" {
    pub fn wbu_driver_get_throttle() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_brake_intensity(intensity: f64);
}
extern "C" {
    pub fn wbu_driver_get_brake_intensity() -> f64;
}
extern "C" {
    pub fn wbu_driver_set_indicator(state: WbuDriverIndicatorState);
}
extern "C" {
    pub fn wbu_driver_set_hazard_flashers(state: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_driver_get_indicator() -> WbuDriverIndicatorState;
}
extern "C" {
    pub fn wbu_driver_get_hazard_flashers() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_set_dipped_beams(state: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_driver_set_antifog_lights(state: ::std::os::raw::c_char);
}
extern "C" {
    pub fn wbu_driver_get_dipped_beams() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_get_antifog_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn wbu_driver_get_rpm() -> f64;
}
extern "C" {
    pub fn wbu_driver_get_gear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_driver_set_gear(gear: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wbu_driver_get_gear_number() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wbu_driver_get_control_mode() -> WbuDriverControlMode;
}
extern "C" {
    pub fn wbu_driver_set_wiper_mode(mode: WbuDriverWiperMode);
}
extern "C" {
    pub fn wbu_driver_get_wiper_mode() -> WbuDriverWiperMode;
}
extern "C" {
    pub fn wbu_driver_set_brake(brake: f64);
}
extern "C" {
    pub fn wbu_driver_get_brake() -> f64;
}
pub use self::WbuDriverControlMode as wbu_control_mode;
pub use self::WbuDriverIndicatorState as wbu_indicator_state;
pub use self::WbuDriverWiperMode as wbu_wipers_mode;
extern "C" {
    pub fn wbu_driver_set_wipers_mode(mode: wbu_wipers_mode);
}
extern "C" {
    pub fn wbu_driver_get_wipers_mode() -> wbu_wipers_mode;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
